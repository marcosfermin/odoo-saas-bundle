version: "3.9"

# NOTE: The `deploy:` section is honored when using Docker Swarm.
# With plain docker compose, resource limits under `deploy:` are ignored.
# For non-Swarm, keep `mem_limit`/`cpus` under each service if you need hard limits.

services:
  postgres:
    image: postgres:15
    container_name: odoo_pg
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      POSTGRES_DB: postgres
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    # Needs writes; don't make read-only.
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 4G
        reservations:
          cpus: "0.5"
          memory: 1G

  redis:
    image: redis:7
    container_name: odoo_redis
    restart: unless-stopped
    command: ["redis-server", "--save", "60", "1000", "--appendonly", "yes"]
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    read_only: true
    tmpfs:
      - /tmp
      - /data      # AOF/snapshots go to a tmpfs? If you want persistence, REMOVE this line and rely on the volume above.
    # If you want persistence, prefer: remove tmpfs /data and keep the volume.
    security_opt:
      - no-new-privileges:true
    cap_drop: ["ALL"]
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 256M

  odoo:
    image: odoo:16.0
    container_name: odoo_app
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      HOST: postgres
      USER: ${PG_USER}
      PASSWORD: ${PG_PASSWORD}
      WORKERS: "6"
      LIMIT_TIME_CPU: "120"
      LIMIT_TIME_REAL: "240"
    command:
      [
        "odoo",
        "-c", "/etc/odoo/odoo.conf",
        "--proxy-mode",
        "--db-filter=^%d$",
        "--workers=6",
        "--longpolling-port=8072"
      ]
    volumes:
      - ./config/odoo/odoo.conf:/etc/odoo/odoo.conf:ro
      - odoo_filestore:/var/lib/odoo
      - ./custom-addons:/mnt/extra-addons:ro
    expose:
      - "8069"
      - "8072"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8069/web | grep -q 'Odoo'"]
      interval: 20s
      timeout: 5s
      retries: 10
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    security_opt:
      - no-new-privileges:true
    cap_drop: ["ALL"]
    # Needs DNS/network, no extra caps required for >1024 ports.
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "4"
          memory: 6G
        reservations:
          cpus: "1"
          memory: 2G

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: odoo_admin
    restart: unless-stopped
    depends_on:
      redis:
        condition: service_healthy
    env_file:
      - ./admin/.env
    volumes:
      - admin_state:/opt/odoo-admin     # persist SQLite admin.db + any future state
      - odoo_log:/var/log/odoo:ro       # optional log viewing
    expose:
      - "9090"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9090/login | grep -q 'Admin Login'"]
      interval: 20s
      timeout: 5s
      retries: 10
    read_only: true
    tmpfs:
      - /tmp
      - /var/tmp
    security_opt:
      - no-new-privileges:true
    cap_drop: ["ALL"]
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M

  admin_workers:
    build:
      context: ./admin
      dockerfile: Dockerfile
    container_name: odoo_admin_workers
    restart: unless-stopped
    depends_on:
      admin:
        condition: service_healthy
      redis:
        condition: service_healthy
    env_file:
      - ./admin/.env
    command: ["rq", "worker", "-u", "${REDIS_URL}", "odoo_admin_jobs"]
    # Scale via: `docker compose -f docker-compose.yml -f docker-compose.override.yml -f docker-compose.prod.yml up -d --scale admin_workers=4`
    read_only: true
    tmpfs:
      - /tmp
    security_opt:
      - no-new-privileges:true
    cap_drop: ["ALL"]
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    deploy:
      resources:
        limits:
          cpus: "2"
          memory: 1G
        reservations:
          cpus: "0.25"
          memory: 256M

  nginx:
    image: nginx:stable-alpine
    container_name: odoo_nginx
    restart: unless-stopped
    depends_on:
      - odoo
      - admin
    volumes:
      - ./config/nginx/site.longpoll.conf:/etc/nginx/conf.d/default.conf:ro
      - ./config/nginx/snippets:/etc/nginx/snippets:ro
      - letsencrypt:/etc/letsencrypt
      - certbot-www:/var/www/certbot
    ports:
      - "80:80"
      - "443:443"
    healthcheck:
      test: ["CMD-SHELL", "nginx -t"]
      interval: 30s
      timeout: 10s
      retries: 5
    read_only: true
    tmpfs:
      - /var/cache/nginx
      - /var/run
      - /tmp
    security_opt:
      - no-new-privileges:true
    cap_drop: ["ALL"]
    cap_add:
      - NET_BIND_SERVICE  # needed for 80/443 binding when caps dropped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
        reservations:
          cpus: "0.25"
          memory: 128M

volumes:
  pgdata:
  redisdata:
  odoo_filestore:
  odoo_log:
  admin_state:
  letsencrypt:
  certbot-www:
