# Source: https://kubernetes.io/docs/concepts/configuration/secret/#opaque-secrets
# This secret contains various application secrets and configuration values.
# Make sure to replace the placeholder values with your actual secrets.
# Consider using a more secure method for managing secrets in production, such as
# integrating with a dedicated secrets management tool or service.  
# For example, you can use AWS Secrets Manager or HashiCorp Vault in production.
# This secret will be used by the app deployment.
# Note: stringData allows you to provide unencoded strings, which Kubernetes will encode for you.
# Be cautious with sensitive data in YAML files, as they can be exposed in version control.
# Consider using a more secure method for managing secrets in production, such as
# integrating with a dedicated secrets management tool or service.

apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: odoo-saas
type: Opaque
stringData:
  # Odoo <- external Postgres (e.g., RDS)
  PG_HOST: "rds-odoo.cluster-abcdefg.us-east-1.rds.amazonaws.com"
  PG_PORT: "5432"
  PG_USER: "odoo"
  PG_PASSWORD: "supersecret"

  # Admin app bootstrap & secrets
  SECRET_KEY: "replace_me"
  BOOTSTRAP_EMAIL: "owner@odoo.example.com"
  BOOTSTRAP_PASSWORD: "change_me_owner"

  # Stripe / Paddle / Fallback
  STRIPE_SIGNING_SECRET: ""
  PADDLE_PUBLIC_KEY_BASE64: ""
  WEBHOOK_SECRET: ""

  # AWS creds (use IRSA or external secret manager in prod)
  AWS_ACCESS_KEY_ID: ""
  AWS_SECRET_ACCESS_KEY: ""
  AWS_REGION: "us-east-1"
  S3_BUCKET: "odoo-saas-backups-prod-1234"
  S3_KMS_KEY_ID: "<paste_kms_arn_from_terraform>"

  # Alerts
  SLACK_WEBHOOK_URL: ""
  SMTP_HOST: ""
  SMTP_PORT: "587"
  SMTP_USER: ""
  SMTP_PASS: ""
  ALERT_EMAIL_TO: "alerts@odoo.example.com"
  ALERT_EMAIL_FROM: "odoo-admin@odoo.example.com"
